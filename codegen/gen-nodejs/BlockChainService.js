//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var model_common_ttypes = require('./model_common_types');
var model_buildTx_ttypes = require('./model_buildTx_types');
var model_postTx_ttypes = require('./model_postTx_types');
var model_sequence_ttypes = require('./model_sequence_types');
var model_balance_ttypes = require('./model_balance_types');
var model_txList_ttypes = require('./model_txList_types');
var model_txDetail_ttypes = require('./model_txDetail_types');


var ttypes = require('./service_blockchain_types');
//HELPER FUNCTIONS AND STRUCTURES

var BlockChainService_BuildTx_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined && args.req !== null) {
      this.req = new model_buildTx_ttypes.BuildTxRequest(args.req);
    }
  }
};
BlockChainService_BuildTx_args.prototype = {};
BlockChainService_BuildTx_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new model_buildTx_ttypes.BuildTxRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BlockChainService_BuildTx_args.prototype.write = function(output) {
  output.writeStructBegin('BlockChainService_BuildTx_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BlockChainService_BuildTx_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof model_common_ttypes.Exception) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new model_buildTx_ttypes.BuildTxResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BlockChainService_BuildTx_result.prototype = {};
BlockChainService_BuildTx_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new model_buildTx_ttypes.BuildTxResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new model_common_ttypes.Exception();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BlockChainService_BuildTx_result.prototype.write = function(output) {
  output.writeStructBegin('BlockChainService_BuildTx_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BlockChainService_PostTx_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined && args.req !== null) {
      this.req = new model_postTx_ttypes.PostTxRequest(args.req);
    }
  }
};
BlockChainService_PostTx_args.prototype = {};
BlockChainService_PostTx_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new model_postTx_ttypes.PostTxRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BlockChainService_PostTx_args.prototype.write = function(output) {
  output.writeStructBegin('BlockChainService_PostTx_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BlockChainService_PostTx_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof model_common_ttypes.Exception) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new model_postTx_ttypes.PostTxResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BlockChainService_PostTx_result.prototype = {};
BlockChainService_PostTx_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new model_postTx_ttypes.PostTxResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new model_common_ttypes.Exception();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BlockChainService_PostTx_result.prototype.write = function(output) {
  output.writeStructBegin('BlockChainService_PostTx_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BlockChainService_GetSequence_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined && args.req !== null) {
      this.req = new model_sequence_ttypes.SequenceRequest(args.req);
    }
  }
};
BlockChainService_GetSequence_args.prototype = {};
BlockChainService_GetSequence_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new model_sequence_ttypes.SequenceRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BlockChainService_GetSequence_args.prototype.write = function(output) {
  output.writeStructBegin('BlockChainService_GetSequence_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BlockChainService_GetSequence_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof model_common_ttypes.Exception) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new model_sequence_ttypes.SequenceResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BlockChainService_GetSequence_result.prototype = {};
BlockChainService_GetSequence_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new model_sequence_ttypes.SequenceResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new model_common_ttypes.Exception();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BlockChainService_GetSequence_result.prototype.write = function(output) {
  output.writeStructBegin('BlockChainService_GetSequence_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BlockChainService_GetBalance_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined && args.req !== null) {
      this.req = new model_balance_ttypes.BalanceRequest(args.req);
    }
  }
};
BlockChainService_GetBalance_args.prototype = {};
BlockChainService_GetBalance_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new model_balance_ttypes.BalanceRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BlockChainService_GetBalance_args.prototype.write = function(output) {
  output.writeStructBegin('BlockChainService_GetBalance_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BlockChainService_GetBalance_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof model_common_ttypes.Exception) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new model_balance_ttypes.BalanceResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BlockChainService_GetBalance_result.prototype = {};
BlockChainService_GetBalance_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new model_balance_ttypes.BalanceResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new model_common_ttypes.Exception();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BlockChainService_GetBalance_result.prototype.write = function(output) {
  output.writeStructBegin('BlockChainService_GetBalance_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BlockChainService_GetTxList_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined && args.req !== null) {
      this.req = new model_txList_ttypes.TxListRequest(args.req);
    }
  }
};
BlockChainService_GetTxList_args.prototype = {};
BlockChainService_GetTxList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new model_txList_ttypes.TxListRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BlockChainService_GetTxList_args.prototype.write = function(output) {
  output.writeStructBegin('BlockChainService_GetTxList_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BlockChainService_GetTxList_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof model_common_ttypes.Exception) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new model_txList_ttypes.TxListResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BlockChainService_GetTxList_result.prototype = {};
BlockChainService_GetTxList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new model_txList_ttypes.TxListResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new model_common_ttypes.Exception();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BlockChainService_GetTxList_result.prototype.write = function(output) {
  output.writeStructBegin('BlockChainService_GetTxList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BlockChainService_GetTxDetail_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined && args.req !== null) {
      this.req = new model_txDetail_ttypes.TxDetailRequest(args.req);
    }
  }
};
BlockChainService_GetTxDetail_args.prototype = {};
BlockChainService_GetTxDetail_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new model_txDetail_ttypes.TxDetailRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BlockChainService_GetTxDetail_args.prototype.write = function(output) {
  output.writeStructBegin('BlockChainService_GetTxDetail_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BlockChainService_GetTxDetail_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof model_common_ttypes.Exception) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new model_txDetail_ttypes.TxDetailResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BlockChainService_GetTxDetail_result.prototype = {};
BlockChainService_GetTxDetail_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new model_txDetail_ttypes.TxDetailResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new model_common_ttypes.Exception();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BlockChainService_GetTxDetail_result.prototype.write = function(output) {
  output.writeStructBegin('BlockChainService_GetTxDetail_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BlockChainServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
BlockChainServiceClient.prototype = {};
BlockChainServiceClient.prototype.seqid = function() { return this._seqid; };
BlockChainServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
BlockChainServiceClient.prototype.BuildTx = function(req, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_BuildTx(req);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_BuildTx(req);
  }
};

BlockChainServiceClient.prototype.send_BuildTx = function(req) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('BuildTx', Thrift.MessageType.CALL, this.seqid());
  var params = {
    req: req
  };
  var args = new BlockChainService_BuildTx_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BlockChainServiceClient.prototype.recv_BuildTx = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BlockChainService_BuildTx_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('BuildTx failed: unknown result');
};
BlockChainServiceClient.prototype.PostTx = function(req, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_PostTx(req);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_PostTx(req);
  }
};

BlockChainServiceClient.prototype.send_PostTx = function(req) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('PostTx', Thrift.MessageType.CALL, this.seqid());
  var params = {
    req: req
  };
  var args = new BlockChainService_PostTx_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BlockChainServiceClient.prototype.recv_PostTx = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BlockChainService_PostTx_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('PostTx failed: unknown result');
};
BlockChainServiceClient.prototype.GetSequence = function(req, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetSequence(req);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetSequence(req);
  }
};

BlockChainServiceClient.prototype.send_GetSequence = function(req) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetSequence', Thrift.MessageType.CALL, this.seqid());
  var params = {
    req: req
  };
  var args = new BlockChainService_GetSequence_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BlockChainServiceClient.prototype.recv_GetSequence = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BlockChainService_GetSequence_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetSequence failed: unknown result');
};
BlockChainServiceClient.prototype.GetBalance = function(req, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetBalance(req);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetBalance(req);
  }
};

BlockChainServiceClient.prototype.send_GetBalance = function(req) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetBalance', Thrift.MessageType.CALL, this.seqid());
  var params = {
    req: req
  };
  var args = new BlockChainService_GetBalance_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BlockChainServiceClient.prototype.recv_GetBalance = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BlockChainService_GetBalance_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetBalance failed: unknown result');
};
BlockChainServiceClient.prototype.GetTxList = function(req, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetTxList(req);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetTxList(req);
  }
};

BlockChainServiceClient.prototype.send_GetTxList = function(req) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetTxList', Thrift.MessageType.CALL, this.seqid());
  var params = {
    req: req
  };
  var args = new BlockChainService_GetTxList_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BlockChainServiceClient.prototype.recv_GetTxList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BlockChainService_GetTxList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetTxList failed: unknown result');
};
BlockChainServiceClient.prototype.GetTxDetail = function(req, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetTxDetail(req);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetTxDetail(req);
  }
};

BlockChainServiceClient.prototype.send_GetTxDetail = function(req) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetTxDetail', Thrift.MessageType.CALL, this.seqid());
  var params = {
    req: req
  };
  var args = new BlockChainService_GetTxDetail_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BlockChainServiceClient.prototype.recv_GetTxDetail = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BlockChainService_GetTxDetail_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetTxDetail failed: unknown result');
};
var BlockChainServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
BlockChainServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
BlockChainServiceProcessor.prototype.process_BuildTx = function(seqid, input, output) {
  var args = new BlockChainService_BuildTx_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.BuildTx.length === 1) {
    Q.fcall(this._handler.BuildTx.bind(this._handler), args.req)
      .then(function(result) {
        var result_obj = new BlockChainService_BuildTx_result({success: result});
        output.writeMessageBegin("BuildTx", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof model_common_ttypes.Exception) {
          result = new BlockChainService_BuildTx_result(err);
          output.writeMessageBegin("BuildTx", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("BuildTx", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.BuildTx(args.req, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof model_common_ttypes.Exception) {
        result_obj = new BlockChainService_BuildTx_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("BuildTx", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("BuildTx", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
BlockChainServiceProcessor.prototype.process_PostTx = function(seqid, input, output) {
  var args = new BlockChainService_PostTx_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.PostTx.length === 1) {
    Q.fcall(this._handler.PostTx.bind(this._handler), args.req)
      .then(function(result) {
        var result_obj = new BlockChainService_PostTx_result({success: result});
        output.writeMessageBegin("PostTx", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof model_common_ttypes.Exception) {
          result = new BlockChainService_PostTx_result(err);
          output.writeMessageBegin("PostTx", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("PostTx", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.PostTx(args.req, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof model_common_ttypes.Exception) {
        result_obj = new BlockChainService_PostTx_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("PostTx", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("PostTx", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
BlockChainServiceProcessor.prototype.process_GetSequence = function(seqid, input, output) {
  var args = new BlockChainService_GetSequence_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetSequence.length === 1) {
    Q.fcall(this._handler.GetSequence.bind(this._handler), args.req)
      .then(function(result) {
        var result_obj = new BlockChainService_GetSequence_result({success: result});
        output.writeMessageBegin("GetSequence", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof model_common_ttypes.Exception) {
          result = new BlockChainService_GetSequence_result(err);
          output.writeMessageBegin("GetSequence", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("GetSequence", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetSequence(args.req, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof model_common_ttypes.Exception) {
        result_obj = new BlockChainService_GetSequence_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetSequence", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetSequence", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
BlockChainServiceProcessor.prototype.process_GetBalance = function(seqid, input, output) {
  var args = new BlockChainService_GetBalance_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetBalance.length === 1) {
    Q.fcall(this._handler.GetBalance.bind(this._handler), args.req)
      .then(function(result) {
        var result_obj = new BlockChainService_GetBalance_result({success: result});
        output.writeMessageBegin("GetBalance", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof model_common_ttypes.Exception) {
          result = new BlockChainService_GetBalance_result(err);
          output.writeMessageBegin("GetBalance", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("GetBalance", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetBalance(args.req, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof model_common_ttypes.Exception) {
        result_obj = new BlockChainService_GetBalance_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetBalance", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetBalance", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
BlockChainServiceProcessor.prototype.process_GetTxList = function(seqid, input, output) {
  var args = new BlockChainService_GetTxList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetTxList.length === 1) {
    Q.fcall(this._handler.GetTxList.bind(this._handler), args.req)
      .then(function(result) {
        var result_obj = new BlockChainService_GetTxList_result({success: result});
        output.writeMessageBegin("GetTxList", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof model_common_ttypes.Exception) {
          result = new BlockChainService_GetTxList_result(err);
          output.writeMessageBegin("GetTxList", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("GetTxList", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetTxList(args.req, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof model_common_ttypes.Exception) {
        result_obj = new BlockChainService_GetTxList_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetTxList", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetTxList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
BlockChainServiceProcessor.prototype.process_GetTxDetail = function(seqid, input, output) {
  var args = new BlockChainService_GetTxDetail_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetTxDetail.length === 1) {
    Q.fcall(this._handler.GetTxDetail.bind(this._handler), args.req)
      .then(function(result) {
        var result_obj = new BlockChainService_GetTxDetail_result({success: result});
        output.writeMessageBegin("GetTxDetail", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof model_common_ttypes.Exception) {
          result = new BlockChainService_GetTxDetail_result(err);
          output.writeMessageBegin("GetTxDetail", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("GetTxDetail", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetTxDetail(args.req, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof model_common_ttypes.Exception) {
        result_obj = new BlockChainService_GetTxDetail_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetTxDetail", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetTxDetail", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
