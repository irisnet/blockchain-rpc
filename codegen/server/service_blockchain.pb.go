// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service_blockchain.proto

package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Ignoring public import of Coin from model_common.proto

// Ignoring public import of Address from model_common.proto

// Ignoring public import of Fee from model_common.proto

// Ignoring public import of Memo from model_common.proto

// Ignoring public import of Error from model_common.proto

// Ignoring public import of ResponseStatus from model_common.proto

// Ignoring public import of BuildTxRequest from model_buildTx.proto

// Ignoring public import of BuildTxResponse from model_buildTx.proto

// Ignoring public import of PostTxRequest from model_postTx.proto

// Ignoring public import of PostTxResponse from model_postTx.proto

// Ignoring public import of SequenceRequest from model_sequence.proto

// Ignoring public import of SequenceResponse from model_sequence.proto

// Ignoring public import of BalanceRequest from model_balance.proto

// Ignoring public import of SequenceResponse from model_balance.proto

// Ignoring public import of TxListRequest from model_txList.proto

// Ignoring public import of TxListResponse from model_txList.proto

// Ignoring public import of TxDetailRequest from model_txDetail.proto

// Ignoring public import of TxDetailResponse from model_txDetail.proto

// Ignoring public import of Fee from model_txDetail.proto

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BlockChainServiceClient is the client API for BlockChainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlockChainServiceClient interface {
	// build tx
	BuildTx(ctx context.Context, in *BuildTxRequest, opts ...grpc.CallOption) (*BuildTxResponse, error)
	// post tx
	PostTx(ctx context.Context, in *PostTxRequest, opts ...grpc.CallOption) (*PostTxResponse, error)
	// get sequence
	GetSequence(ctx context.Context, in *SequenceRequest, opts ...grpc.CallOption) (*SequenceResponse, error)
	// get balance
	GetBalance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*SequenceResponse, error)
	// get tx list
	GetTxList(ctx context.Context, in *TxListRequest, opts ...grpc.CallOption) (*TxListResponse, error)
	// get tx detail
	GetTxDetail(ctx context.Context, in *TxDetailRequest, opts ...grpc.CallOption) (*TxDetailResponse, error)
}

type blockChainServiceClient struct {
	cc *grpc.ClientConn
}

func NewBlockChainServiceClient(cc *grpc.ClientConn) BlockChainServiceClient {
	return &blockChainServiceClient{cc}
}

func (c *blockChainServiceClient) BuildTx(ctx context.Context, in *BuildTxRequest, opts ...grpc.CallOption) (*BuildTxResponse, error) {
	out := new(BuildTxResponse)
	err := c.cc.Invoke(ctx, "/service.blockchain.BlockChainService/BuildTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainServiceClient) PostTx(ctx context.Context, in *PostTxRequest, opts ...grpc.CallOption) (*PostTxResponse, error) {
	out := new(PostTxResponse)
	err := c.cc.Invoke(ctx, "/service.blockchain.BlockChainService/PostTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainServiceClient) GetSequence(ctx context.Context, in *SequenceRequest, opts ...grpc.CallOption) (*SequenceResponse, error) {
	out := new(SequenceResponse)
	err := c.cc.Invoke(ctx, "/service.blockchain.BlockChainService/GetSequence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainServiceClient) GetBalance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*SequenceResponse, error) {
	out := new(SequenceResponse)
	err := c.cc.Invoke(ctx, "/service.blockchain.BlockChainService/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainServiceClient) GetTxList(ctx context.Context, in *TxListRequest, opts ...grpc.CallOption) (*TxListResponse, error) {
	out := new(TxListResponse)
	err := c.cc.Invoke(ctx, "/service.blockchain.BlockChainService/GetTxList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainServiceClient) GetTxDetail(ctx context.Context, in *TxDetailRequest, opts ...grpc.CallOption) (*TxDetailResponse, error) {
	out := new(TxDetailResponse)
	err := c.cc.Invoke(ctx, "/service.blockchain.BlockChainService/GetTxDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockChainServiceServer is the server API for BlockChainService service.
type BlockChainServiceServer interface {
	// build tx
	BuildTx(context.Context, *BuildTxRequest) (*BuildTxResponse, error)
	// post tx
	PostTx(context.Context, *PostTxRequest) (*PostTxResponse, error)
	// get sequence
	GetSequence(context.Context, *SequenceRequest) (*SequenceResponse, error)
	// get balance
	GetBalance(context.Context, *BalanceRequest) (*SequenceResponse, error)
	// get tx list
	GetTxList(context.Context, *TxListRequest) (*TxListResponse, error)
	// get tx detail
	GetTxDetail(context.Context, *TxDetailRequest) (*TxDetailResponse, error)
}

func RegisterBlockChainServiceServer(s *grpc.Server, srv BlockChainServiceServer) {
	s.RegisterService(&_BlockChainService_serviceDesc, srv)
}

func _BlockChainService_BuildTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServiceServer).BuildTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.blockchain.BlockChainService/BuildTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServiceServer).BuildTx(ctx, req.(*BuildTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainService_PostTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServiceServer).PostTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.blockchain.BlockChainService/PostTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServiceServer).PostTx(ctx, req.(*PostTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainService_GetSequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SequenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServiceServer).GetSequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.blockchain.BlockChainService/GetSequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServiceServer).GetSequence(ctx, req.(*SequenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.blockchain.BlockChainService/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServiceServer).GetBalance(ctx, req.(*BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainService_GetTxList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServiceServer).GetTxList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.blockchain.BlockChainService/GetTxList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServiceServer).GetTxList(ctx, req.(*TxListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainService_GetTxDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServiceServer).GetTxDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.blockchain.BlockChainService/GetTxDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServiceServer).GetTxDetail(ctx, req.(*TxDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlockChainService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.blockchain.BlockChainService",
	HandlerType: (*BlockChainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildTx",
			Handler:    _BlockChainService_BuildTx_Handler,
		},
		{
			MethodName: "PostTx",
			Handler:    _BlockChainService_PostTx_Handler,
		},
		{
			MethodName: "GetSequence",
			Handler:    _BlockChainService_GetSequence_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _BlockChainService_GetBalance_Handler,
		},
		{
			MethodName: "GetTxList",
			Handler:    _BlockChainService_GetTxList_Handler,
		},
		{
			MethodName: "GetTxDetail",
			Handler:    _BlockChainService_GetTxDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_blockchain.proto",
}

func init() {
	proto.RegisterFile("service_blockchain.proto", fileDescriptor_service_blockchain_3e19a831f041e9e3)
}

var fileDescriptor_service_blockchain_3e19a831f041e9e3 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x4d, 0x4e, 0xc3, 0x30,
	0x10, 0x85, 0x0b, 0xa5, 0xa9, 0x30, 0x2b, 0x0c, 0x0b, 0x14, 0x7e, 0x8a, 0x38, 0x40, 0x16, 0x70,
	0x83, 0x00, 0x0a, 0x42, 0x08, 0x59, 0x6d, 0x56, 0x6c, 0xaa, 0x24, 0x1d, 0x89, 0x88, 0x24, 0x0e,
	0xf5, 0x14, 0xe5, 0xc8, 0x1c, 0x03, 0xc5, 0x1e, 0x3b, 0xc2, 0x4a, 0xb7, 0xdf, 0x7b, 0xf3, 0x34,
	0x6f, 0x6c, 0x76, 0xa1, 0x60, 0xfb, 0x53, 0x16, 0xb0, 0xce, 0x2b, 0x59, 0x7c, 0x15, 0x9f, 0x59,
	0xd9, 0x44, 0xed, 0x56, 0xa2, 0xe4, 0x9c, 0x94, 0x68, 0x50, 0x42, 0x5e, 0xcb, 0x0d, 0x54, 0xeb,
	0x42, 0xd6, 0xb5, 0x24, 0x5f, 0x78, 0x66, 0x58, 0xbe, 0x2b, 0xab, 0x4d, 0xda, 0x11, 0x24, 0x63,
	0x2b, 0x15, 0x3a, 0x76, 0x6e, 0x98, 0x82, 0xef, 0x1d, 0x34, 0x05, 0x78, 0xe3, 0x59, 0x95, 0x0d,
	0x90, 0xc6, 0xb1, 0x7b, 0x2b, 0x15, 0xfe, 0x1f, 0xc7, 0xee, 0x09, 0x30, 0x2b, 0x2b, 0x43, 0xef,
	0x7f, 0xa7, 0xec, 0x34, 0xee, 0x17, 0x7c, 0xec, 0x17, 0x5c, 0x99, 0x95, 0xf9, 0x2b, 0x9b, 0xc7,
	0x66, 0x1f, 0x7e, 0x1d, 0xe9, 0xb9, 0xc8, 0xee, 0x47, 0x7c, 0xd9, 0x6f, 0xa1, 0x30, 0xbc, 0xd9,
	0x27, 0xab, 0x56, 0x36, 0x0a, 0xee, 0x26, 0xfc, 0x99, 0x05, 0x42, 0xd7, 0xe0, 0x97, 0xe4, 0xa5,
	0x56, 0x86, 0xda, 0xa0, 0xab, 0x71, 0xd1, 0xc5, 0x2c, 0xd9, 0x49, 0x02, 0xb8, 0xa2, 0xf2, 0x7c,
	0x41, 0x76, 0x77, 0x0d, 0xab, 0xd8, 0xbc, 0xdb, 0xfd, 0x06, 0x97, 0xf9, 0xce, 0x58, 0x02, 0x18,
	0x9b, 0xd3, 0x0d, 0x4d, 0xe9, 0x94, 0xc4, 0x6d, 0xe0, 0xc2, 0x93, 0x47, 0xf2, 0x5e, 0xd8, 0x71,
	0x02, 0x98, 0xea, 0xab, 0xbb, 0xb6, 0xf4, 0x08, 0x86, 0xfa, 0x6d, 0x3d, 0xd1, 0x6b, 0x9b, 0xd2,
	0x5b, 0xb9, 0xb6, 0xee, 0xf1, 0xac, 0xe2, 0xb7, 0x1d, 0x31, 0xd8, 0xcc, 0x78, 0xfe, 0x31, 0xd3,
	0x26, 0x31, 0x11, 0x07, 0xe2, 0x50, 0x4c, 0xc5, 0x91, 0x98, 0x89, 0x20, 0x0f, 0xf4, 0x47, 0x78,
	0xf8, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x19, 0xb5, 0x84, 0xec, 0xca, 0x02, 0x00, 0x00,
}
