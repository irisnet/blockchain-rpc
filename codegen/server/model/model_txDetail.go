// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package model

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// txDetail request
// @param txHash, tx hash
// 
// Attributes:
//  - TxHash
type TxDetailRequest struct {
  TxHash string `thrift:"txHash,1,required" db:"txHash" json:"txHash"`
}

func NewTxDetailRequest() *TxDetailRequest {
  return &TxDetailRequest{}
}


func (p *TxDetailRequest) GetTxHash() string {
  return p.TxHash
}
func (p *TxDetailRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTxHash bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetTxHash = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTxHash{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TxHash is not set"));
  }
  return nil
}

func (p *TxDetailRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TxHash = v
}
  return nil
}

func (p *TxDetailRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TxDetailRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TxDetailRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("txHash", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:txHash: ", p), err) }
  if err := oprot.WriteString(string(p.TxHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.txHash (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:txHash: ", p), err) }
  return err
}

func (p *TxDetailRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TxDetailRequest(%+v)", *p)
}

// txDetail response
// @param txHash, tx hash
// @param time, tx time
// @param height, block height
// @param sender, sender info
// @param receiver, receiver info
// @param amount
// @param type, tx type
// @param status, tx status
// @param fee
// @param memo
// @param ext, extra info
// 
// Attributes:
//  - TxHash
//  - Time
//  - Height
//  - Sender
//  - Receiver
//  - Amount
//  - Type
//  - Status
//  - Fee
//  - Memo
//  - Ext
type TxDetailResponse struct {
  TxHash string `thrift:"txHash,1" db:"txHash" json:"txHash"`
  Time string `thrift:"time,2" db:"time" json:"time"`
  Height int64 `thrift:"height,3" db:"height" json:"height"`
  Sender *Address `thrift:"sender,4" db:"sender" json:"sender"`
  Receiver *Address `thrift:"receiver,5" db:"receiver" json:"receiver"`
  Amount []*Coin `thrift:"amount,6" db:"amount" json:"amount"`
  Type string `thrift:"type,7" db:"type" json:"type"`
  Status string `thrift:"status,8" db:"status" json:"status"`
  Fee *FeeUsed `thrift:"fee,9" db:"fee" json:"fee"`
  Memo *Memo `thrift:"memo,10" db:"memo" json:"memo"`
  Ext int8 `thrift:"ext,11" db:"ext" json:"ext"`
}

func NewTxDetailResponse() *TxDetailResponse {
  return &TxDetailResponse{}
}


func (p *TxDetailResponse) GetTxHash() string {
  return p.TxHash
}

func (p *TxDetailResponse) GetTime() string {
  return p.Time
}

func (p *TxDetailResponse) GetHeight() int64 {
  return p.Height
}
var TxDetailResponse_Sender_DEFAULT *Address
func (p *TxDetailResponse) GetSender() *Address {
  if !p.IsSetSender() {
    return TxDetailResponse_Sender_DEFAULT
  }
return p.Sender
}
var TxDetailResponse_Receiver_DEFAULT *Address
func (p *TxDetailResponse) GetReceiver() *Address {
  if !p.IsSetReceiver() {
    return TxDetailResponse_Receiver_DEFAULT
  }
return p.Receiver
}

func (p *TxDetailResponse) GetAmount() []*Coin {
  return p.Amount
}

func (p *TxDetailResponse) GetType() string {
  return p.Type
}

func (p *TxDetailResponse) GetStatus() string {
  return p.Status
}
var TxDetailResponse_Fee_DEFAULT *FeeUsed
func (p *TxDetailResponse) GetFee() *FeeUsed {
  if !p.IsSetFee() {
    return TxDetailResponse_Fee_DEFAULT
  }
return p.Fee
}
var TxDetailResponse_Memo_DEFAULT *Memo
func (p *TxDetailResponse) GetMemo() *Memo {
  if !p.IsSetMemo() {
    return TxDetailResponse_Memo_DEFAULT
  }
return p.Memo
}

func (p *TxDetailResponse) GetExt() int8 {
  return p.Ext
}
func (p *TxDetailResponse) IsSetSender() bool {
  return p.Sender != nil
}

func (p *TxDetailResponse) IsSetReceiver() bool {
  return p.Receiver != nil
}

func (p *TxDetailResponse) IsSetFee() bool {
  return p.Fee != nil
}

func (p *TxDetailResponse) IsSetMemo() bool {
  return p.Memo != nil
}

func (p *TxDetailResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TxDetailResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TxHash = v
}
  return nil
}

func (p *TxDetailResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Time = v
}
  return nil
}

func (p *TxDetailResponse)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Height = v
}
  return nil
}

func (p *TxDetailResponse)  ReadField4(iprot thrift.TProtocol) error {
  p.Sender = &Address{}
  if err := p.Sender.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Sender), err)
  }
  return nil
}

func (p *TxDetailResponse)  ReadField5(iprot thrift.TProtocol) error {
  p.Receiver = &Address{}
  if err := p.Receiver.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Receiver), err)
  }
  return nil
}

func (p *TxDetailResponse)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Coin, 0, size)
  p.Amount =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &Coin{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Amount = append(p.Amount, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TxDetailResponse)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *TxDetailResponse)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TxDetailResponse)  ReadField9(iprot thrift.TProtocol) error {
  p.Fee = &FeeUsed{}
  if err := p.Fee.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Fee), err)
  }
  return nil
}

func (p *TxDetailResponse)  ReadField10(iprot thrift.TProtocol) error {
  p.Memo = &Memo{}
  if err := p.Memo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Memo), err)
  }
  return nil
}

func (p *TxDetailResponse)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  temp := int8(v)
  p.Ext = temp
}
  return nil
}

func (p *TxDetailResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TxDetailResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TxDetailResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("txHash", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:txHash: ", p), err) }
  if err := oprot.WriteString(string(p.TxHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.txHash (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:txHash: ", p), err) }
  return err
}

func (p *TxDetailResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("time", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:time: ", p), err) }
  if err := oprot.WriteString(string(p.Time)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.time (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:time: ", p), err) }
  return err
}

func (p *TxDetailResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("height", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:height: ", p), err) }
  if err := oprot.WriteI64(int64(p.Height)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.height (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:height: ", p), err) }
  return err
}

func (p *TxDetailResponse) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sender", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sender: ", p), err) }
  if err := p.Sender.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Sender), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sender: ", p), err) }
  return err
}

func (p *TxDetailResponse) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("receiver", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:receiver: ", p), err) }
  if err := p.Receiver.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Receiver), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:receiver: ", p), err) }
  return err
}

func (p *TxDetailResponse) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:amount: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Amount)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Amount {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:amount: ", p), err) }
  return err
}

func (p *TxDetailResponse) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:type: ", p), err) }
  return err
}

func (p *TxDetailResponse) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:status: ", p), err) }
  return err
}

func (p *TxDetailResponse) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fee", thrift.STRUCT, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:fee: ", p), err) }
  if err := p.Fee.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Fee), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:fee: ", p), err) }
  return err
}

func (p *TxDetailResponse) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memo", thrift.STRUCT, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:memo: ", p), err) }
  if err := p.Memo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Memo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:memo: ", p), err) }
  return err
}

func (p *TxDetailResponse) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ext", thrift.BYTE, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:ext: ", p), err) }
  if err := oprot.WriteByte(int8(p.Ext)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ext (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:ext: ", p), err) }
  return err
}

func (p *TxDetailResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TxDetailResponse(%+v)", *p)
}

// Attributes:
//  - Denom
//  - Cost
type FeeUsed struct {
  Denom string `thrift:"denom,1" db:"denom" json:"denom"`
  Cost float64 `thrift:"cost,2" db:"cost" json:"cost"`
}

func NewFeeUsed() *FeeUsed {
  return &FeeUsed{}
}


func (p *FeeUsed) GetDenom() string {
  return p.Denom
}

func (p *FeeUsed) GetCost() float64 {
  return p.Cost
}
func (p *FeeUsed) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FeeUsed)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Denom = v
}
  return nil
}

func (p *FeeUsed)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Cost = v
}
  return nil
}

func (p *FeeUsed) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FeeUsed"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FeeUsed) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("denom", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:denom: ", p), err) }
  if err := oprot.WriteString(string(p.Denom)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.denom (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:denom: ", p), err) }
  return err
}

func (p *FeeUsed) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cost", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cost: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Cost)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cost (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cost: ", p), err) }
  return err
}

func (p *FeeUsed) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FeeUsed(%+v)", *p)
}

