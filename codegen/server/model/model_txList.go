// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package model

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// txList request
// @param address, address of blockchain
// @param page, current page
// @param perPage, num of record each page
// @param status, tx status
// @param type, tx type
// @param startTime, tx time
// @param endTime, tx time
// @param sort, sort
// @param q, content of query
// 
// Attributes:
//  - Address
//  - Page
//  - PerPage
//  - Status
//  - Type
//  - StartTime
//  - EndTime
//  - Sort
//  - Q
type TxListRequest struct {
  Address string `thrift:"address,1" db:"address" json:"address"`
  Page int64 `thrift:"page,2,required" db:"page" json:"page"`
  PerPage int64 `thrift:"perPage,3,required" db:"perPage" json:"perPage"`
  Status string `thrift:"status,4" db:"status" json:"status"`
  Type string `thrift:"type,5" db:"type" json:"type"`
  StartTime string `thrift:"startTime,6" db:"startTime" json:"startTime"`
  EndTime string `thrift:"endTime,7" db:"endTime" json:"endTime"`
  Sort string `thrift:"sort,8" db:"sort" json:"sort"`
  Q string `thrift:"q,9" db:"q" json:"q"`
}

func NewTxListRequest() *TxListRequest {
  return &TxListRequest{}
}


func (p *TxListRequest) GetAddress() string {
  return p.Address
}

func (p *TxListRequest) GetPage() int64 {
  return p.Page
}

func (p *TxListRequest) GetPerPage() int64 {
  return p.PerPage
}

func (p *TxListRequest) GetStatus() string {
  return p.Status
}

func (p *TxListRequest) GetType() string {
  return p.Type
}

func (p *TxListRequest) GetStartTime() string {
  return p.StartTime
}

func (p *TxListRequest) GetEndTime() string {
  return p.EndTime
}

func (p *TxListRequest) GetSort() string {
  return p.Sort
}

func (p *TxListRequest) GetQ() string {
  return p.Q
}
func (p *TxListRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPage bool = false;
  var issetPerPage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPage = true
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPerPage = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Page is not set"));
  }
  if !issetPerPage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PerPage is not set"));
  }
  return nil
}

func (p *TxListRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *TxListRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *TxListRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PerPage = v
}
  return nil
}

func (p *TxListRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TxListRequest)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *TxListRequest)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TxListRequest)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *TxListRequest)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Sort = v
}
  return nil
}

func (p *TxListRequest)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Q = v
}
  return nil
}

func (p *TxListRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TxListRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TxListRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  return err
}

func (p *TxListRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:page: ", p), err) }
  if err := oprot.WriteI64(int64(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:page: ", p), err) }
  return err
}

func (p *TxListRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("perPage", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:perPage: ", p), err) }
  if err := oprot.WriteI64(int64(p.PerPage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.perPage (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:perPage: ", p), err) }
  return err
}

func (p *TxListRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:status: ", p), err) }
  return err
}

func (p *TxListRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:type: ", p), err) }
  return err
}

func (p *TxListRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startTime", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:startTime: ", p), err) }
  if err := oprot.WriteString(string(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:startTime: ", p), err) }
  return err
}

func (p *TxListRequest) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endTime", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:endTime: ", p), err) }
  if err := oprot.WriteString(string(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:endTime: ", p), err) }
  return err
}

func (p *TxListRequest) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sort", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:sort: ", p), err) }
  if err := oprot.WriteString(string(p.Sort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sort (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:sort: ", p), err) }
  return err
}

func (p *TxListRequest) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("q", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:q: ", p), err) }
  if err := oprot.WriteString(string(p.Q)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.q (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:q: ", p), err) }
  return err
}

func (p *TxListRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TxListRequest(%+v)", *p)
}

// txList response
// @param txs, list of tx
// 
// Attributes:
//  - Txs
type TxListResponse struct {
  Txs []*TxListObject `thrift:"txs,1" db:"txs" json:"txs"`
}

func NewTxListResponse() *TxListResponse {
  return &TxListResponse{}
}


func (p *TxListResponse) GetTxs() []*TxListObject {
  return p.Txs
}
func (p *TxListResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TxListResponse)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TxListObject, 0, size)
  p.Txs =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &TxListObject{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Txs = append(p.Txs, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TxListResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TxListResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TxListResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("txs", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:txs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Txs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Txs {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:txs: ", p), err) }
  return err
}

func (p *TxListResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TxListResponse(%+v)", *p)
}

// content of txList response
// @param txHash, tx hash
// @param time, tx time
// @param height, block height
// @param sender, sender info
// @param receiver, receiver info
// @param amount, tx amount
// @param type, tx type
// @param status, tx status
// @param ext, extra content
// 
// Attributes:
//  - TxHash
//  - Time
//  - Height
//  - Sender
//  - Receiver
//  - Amount
//  - Type
//  - Status
//  - Ext
type TxListObject struct {
  TxHash string `thrift:"txHash,1" db:"txHash" json:"txHash"`
  Time string `thrift:"time,2" db:"time" json:"time"`
  Height int64 `thrift:"height,3" db:"height" json:"height"`
  Sender *Address `thrift:"sender,4" db:"sender" json:"sender"`
  Receiver *Address `thrift:"receiver,5" db:"receiver" json:"receiver"`
  Amount []*Coin `thrift:"amount,6" db:"amount" json:"amount"`
  Type string `thrift:"type,7" db:"type" json:"type"`
  Status string `thrift:"status,8" db:"status" json:"status"`
  Ext string `thrift:"ext,9" db:"ext" json:"ext"`
}

func NewTxListObject() *TxListObject {
  return &TxListObject{}
}


func (p *TxListObject) GetTxHash() string {
  return p.TxHash
}

func (p *TxListObject) GetTime() string {
  return p.Time
}

func (p *TxListObject) GetHeight() int64 {
  return p.Height
}
var TxListObject_Sender_DEFAULT *Address
func (p *TxListObject) GetSender() *Address {
  if !p.IsSetSender() {
    return TxListObject_Sender_DEFAULT
  }
return p.Sender
}
var TxListObject_Receiver_DEFAULT *Address
func (p *TxListObject) GetReceiver() *Address {
  if !p.IsSetReceiver() {
    return TxListObject_Receiver_DEFAULT
  }
return p.Receiver
}

func (p *TxListObject) GetAmount() []*Coin {
  return p.Amount
}

func (p *TxListObject) GetType() string {
  return p.Type
}

func (p *TxListObject) GetStatus() string {
  return p.Status
}

func (p *TxListObject) GetExt() string {
  return p.Ext
}
func (p *TxListObject) IsSetSender() bool {
  return p.Sender != nil
}

func (p *TxListObject) IsSetReceiver() bool {
  return p.Receiver != nil
}

func (p *TxListObject) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TxListObject)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TxHash = v
}
  return nil
}

func (p *TxListObject)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Time = v
}
  return nil
}

func (p *TxListObject)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Height = v
}
  return nil
}

func (p *TxListObject)  ReadField4(iprot thrift.TProtocol) error {
  p.Sender = &Address{}
  if err := p.Sender.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Sender), err)
  }
  return nil
}

func (p *TxListObject)  ReadField5(iprot thrift.TProtocol) error {
  p.Receiver = &Address{}
  if err := p.Receiver.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Receiver), err)
  }
  return nil
}

func (p *TxListObject)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Coin, 0, size)
  p.Amount =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &Coin{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Amount = append(p.Amount, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TxListObject)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *TxListObject)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TxListObject)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Ext = v
}
  return nil
}

func (p *TxListObject) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TxListObject"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TxListObject) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("txHash", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:txHash: ", p), err) }
  if err := oprot.WriteString(string(p.TxHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.txHash (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:txHash: ", p), err) }
  return err
}

func (p *TxListObject) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("time", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:time: ", p), err) }
  if err := oprot.WriteString(string(p.Time)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.time (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:time: ", p), err) }
  return err
}

func (p *TxListObject) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("height", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:height: ", p), err) }
  if err := oprot.WriteI64(int64(p.Height)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.height (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:height: ", p), err) }
  return err
}

func (p *TxListObject) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sender", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sender: ", p), err) }
  if err := p.Sender.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Sender), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sender: ", p), err) }
  return err
}

func (p *TxListObject) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("receiver", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:receiver: ", p), err) }
  if err := p.Receiver.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Receiver), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:receiver: ", p), err) }
  return err
}

func (p *TxListObject) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:amount: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Amount)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Amount {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:amount: ", p), err) }
  return err
}

func (p *TxListObject) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:type: ", p), err) }
  return err
}

func (p *TxListObject) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:status: ", p), err) }
  return err
}

func (p *TxListObject) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ext", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:ext: ", p), err) }
  if err := oprot.WriteString(string(p.Ext)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ext (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:ext: ", p), err) }
  return err
}

func (p *TxListObject) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TxListObject(%+v)", *p)
}

